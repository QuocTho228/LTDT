Viết chương trình bằng ngôn ngữ C cho phép người dùng nhập dữ liệu của một đồ thị có hướng và in các đỉnh kề của các đỉnh ra màn hình.

Biểu diễn đồ thị bằng phương pháp "Danh sách cung".

Đầu vào

Dữ liệu đầu vào được đọc từ dòng nhập chuẩn (stdin, bàn phím) theo định dạng:

Dòng đầu tiên chứa 2 số nguyên n và m cách nhau một khoảng trắng, n: số đỉnh, m: số cung
m dòng tiếp theo, mỗi dòng chứa 2 số nguyên u v cách nhau 1 khoảng trắng mô tả cung (u, v).
Đầu ra

 

In ra n dòng, dòng thứ i in các đỉnh kề của đỉnh i, cách nhau 1 khoảng trắng, theo thứ tự tăng dần (không lặp lại), ví dụ: neighbours(2) = 1 2 4
 

 

Chú ý

Giả sử dữ liệu đầu vào luôn hợp lệ, không cần phải kiểm tra
Nộp toàn bộ chương trình
Xem thêm định dạng đầu vào và đầu ra trong phần For example
Ấn "Precheck" (nếu có) để kiểm tra chương trình trên các ví dụ (sai KHÔNG bị trừ điểm)
Ấn "Check" (nếu có) để kiểm tra chương trình trên toàn bộ dữ liệu kiểm tra (sai bị TRỪ ĐIỂM)
For example:

Input	
4 3
1 3
4 1
3 3

Result
neighbours(1) = 3
neighbours(2) =
neighbours(3) = 3
neighbours(4) = 1



#include <stdio.h>
#include <stdlib.h>

#define MAX_M 500

// Cấu trúc cung
typedef struct {
    int u, v;
} Edge;

// Cấu trúc đồ thị
typedef struct {
    int n, m;
    Edge edges[MAX_M];
} Graph;

// Khởi tạo đồ thị
void init_graph(Graph *pG, int n) {
    pG->n = n;
    pG->m = 0;
}

// Thêm cung (u, v) vào đồ thị
void add_edge(Graph *pG, int u, int v) {
    pG->edges[pG->m].u = u;
    pG->edges[pG->m].v = v;
    pG->m++;
}

// Hàm kiểm tra xem đỉnh v đã có trong danh sách chưa
int is_present(int *array, int size, int v) {
    for (int i = 0; i < size; i++) {
        if (array[i] == v) {
            return 1;
        }
    }
    return 0;
}

// Hàm in các đỉnh kề của từng đỉnh
void print_neighbours(Graph *pG) {
    for (int i = 1; i <= pG->n; i++) {
        int neighbours[MAX_M];
        int size = 0;

        // Duyệt qua tất cả các cung để tìm đỉnh kề của i
        for (int j = 0; j < pG->m; j++) {
            if (pG->edges[j].u == i) {
                if (!is_present(neighbours, size, pG->edges[j].v)) {
                    neighbours[size++] = pG->edges[j].v;
                }
            }
        }

        // Sắp xếp các đỉnh kề theo thứ tự tăng dần
        for (int a = 0; a < size - 1; a++) {
            for (int b = a + 1; b < size; b++) {
                if (neighbours[a] > neighbours[b]) {
                    int temp = neighbours[a];
                    neighbours[a] = neighbours[b];
                    neighbours[b] = temp;
                }
            }
        }

        // In kết quả
        printf("neighbours(%d) =", i);
        for (int k = 0; k < size; k++) {
            printf(" %d", neighbours[k]);
        }
        printf("\n");
    }
}

// Chương trình chính
int main() {
    Graph G;
    int n, m;
    scanf("%d %d", &n, &m);

    init_graph(&G, n);

    for (int i = 0; i < m; i++) {
        int u, v;
        scanf("%d %d", &u, &v);
        add_edge(&G, u, v);
    }

    print_neighbours(&G);

    return 0;
}
