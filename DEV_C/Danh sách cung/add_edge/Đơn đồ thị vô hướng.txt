Cho cấu trúc dữ liệu đồ thị Graph được cài đặt bằng phương pháp "Danh sách cung" dùng để biểu diễn các đơn đồ thị vô hướng như sau:

```#define MAX_M 500
typedef struct {
    int u, v;
} Edge;
typedef struct {
    int n, m;
    Edge edges[MAX_M];
} Graph;```
Các cung được lưu trong danh sách edges với chỉ số từ 0, 1, 2, ..., m-1

Hàm khởi tạo đồ thị:

```void init_graph(Graph *pG, int n) {
    G->n = n;
    G->m = 0;
}```
Viết hàm add_edge(Graph *pG, int u, int v) để thêm cung (u, v) vào đồ thị G theo mẫu:

```void add_edge(Graph *pG, int u, int v) {
}```
Vì pG là đơn đồ thị vô hướng nên nếu cung (u, v) hoặc cung (v, u) đã có trong đồ thị rồi thì bỏ qua, không thêm vào nữa.
Giả sử các tham số của hàm đều hợp lệ (1≤u,v≤n)
, không cần phải kiểm tra.
Không nộp toàn bộ chương trình, chỉ nộp phần định nghĩa hàm add_edge().



void add_edge(Graph *pG, int u, int v) {
    // Không thêm cung tự lặp
    if (u == v) {
        return;
    }
    
    // Kiểm tra xem cung (u, v) hoặc (v, u) đã tồn tại hay chưa
    for (int i = 0; i < pG->m; i++) {
        if ((pG->edges[i].u == u && pG->edges[i].v == v) ||
            (pG->edges[i].u == v && pG->edges[i].v == u)) {
            return; // Nếu tồn tại, thoát khỏi hàm
        }
    }

    // Thêm cung mới vào danh sách cung
    pG->edges[pG->m].u = u;
    pG->edges[pG->m].v = v;
    pG->m++; // Tăng số lượng cung
}