Cho chương trình có hàm main() như bên dưới. Hãy viết thêm khai báo CTDL Graph (biểu diễn đồ thị bằng phương pháp danh sách cung) và cài đặt các hàm cần thiết vào chỗ ba chấm (...) để có được chương trình hoàn chỉnh, chạy được.

#include <stdio.h>

/* Bổ sung khai báo CTDL Graph và cài đặt các hàm cần thiết */
...
/* Hết phần mã lệnh của bạn */

//Hàm main()
int main() {
    Graph G;
    int n = 4, u;

    //Khởi tạo đồ thị
    init_graph(&G, n);
    //Thêm cung vào đồ thị
    add_edge(&G, 1, 2);
    add_edge(&G, 1, 3);
    add_edge(&G, 1, 3);
    add_edge(&G, 3, 4);
    add_edge(&G, 1, 4);

    //In bậc của các đỉnh
    for (u = 1; u <= n; u++)
        printf("deg(%d) = %d\n", u, degree(&G, u));
    return 0;
}
Chú ý

Không nộp toàn bộ chương trình, chỉ nộp phần bạn viết.



#include <stdlib.h>

// Cấu trúc danh sách cung
typedef struct {
    int u, v; // Đỉnh bắt đầu và kết thúc của cung
} Edge;

typedef struct {
    Edge edges[100]; // Mảng chứa các cung (tối đa 100 cung)
    int n, m;        // Số đỉnh và số cung
} Graph;

// Hàm khởi tạo đồ thị
void init_graph(Graph *G, int n) {
    G->n = n; // Gán số đỉnh
    G->m = 0; // Ban đầu chưa có cung nào
}

// Hàm thêm cung vào đồ thị
void add_edge(Graph *G, int u, int v) {
    if (G->m >= 100) {
        printf("Vuot qua gioi han so cung.\n");
        return;
    }
    G->edges[G->m].u = u; // Gán đỉnh bắt đầu
    G->edges[G->m].v = v; // Gán đỉnh kết thúc
    G->m++;               // Tăng số cung
}

// Hàm tính bậc của một đỉnh
int degree(Graph *G, int u) {
    int deg = 0;
    for (int i = 0; i < G->m; i++) {
        if (G->edges[i].u == u) deg++; // Đếm nếu u là đỉnh bắt đầu
        if (G->edges[i].v == u) deg++; // Đếm nếu u là đỉnh kết thúc
    }
    return deg;
}
