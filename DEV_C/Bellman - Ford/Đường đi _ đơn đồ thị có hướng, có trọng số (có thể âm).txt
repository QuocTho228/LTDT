Viết chương trình đọc một đơn đồ thị có hướng, có trọng số (có thể âm) từ bàn phím và in ra đường đi ngắn nhất từ đỉnh s đến đỉnh t (s và t cũng được đọc từ bàn phím).

Đầu vào (Input)

Dữ liệu đầu vào được nhập từ bàn phím với định dạng:

Dòng đầu tiên chứa 2 số nguyên n và m (1≤n<100;0≤m<500)
m dòng tiếp theo mỗi dòng chứa 3 số nguyên u, v, w mô tả cung (u, v) có trọng số w (0≤w≤100)
.
Dòng cuối cùng chứa 2 số nguyên s và t.
Dữ liệu đầu vào được đảm bảo là đồ thị không chứa chu trình âm.
Luôn có đường đi từ s đến t.
Đầu ra (Output)

In đường đi ngắn nhất từ s đến t theo mẫu:
```lang:cpp;;
s -> u1 -> u2 -> ... -> t```
Xem thêm ví dụ bên dưới.
Gợi ý

Lần ngược theo p[u] để có được đường đi ngắn nhất.
For example:

Input	Result
3 3	2 -> 1 -> 3  
2 1 3
1 3 -5
2 3 4
2 3


#include <stdio.h>
#include <limits.h>

#define INF INT_MAX

typedef struct {
    int u, v, w;
} Edge;

void bellman_ford(int n, int m, Edge edges[], int s, int t) {
    int dist[n + 1], p[n + 1];
    
    // Khởi tạo khoảng cách
    for (int i = 1; i <= n; i++) {
        dist[i] = INF;
        p[i] = -1;  // -1 biểu thị chưa có đỉnh trước đó
    }
    dist[s] = 0;

    // Thực hiện thuật toán Bellman-Ford
    for (int i = 1; i < n; i++) { // Lặp n-1 lần
        for (int j = 0; j < m; j++) {
            int u = edges[j].u;
            int v = edges[j].v;
            int w = edges[j].w;

            if (dist[u] != INF && dist[u] + w < dist[v]) {
                dist[v] = dist[u] + w;
                p[v] = u;  // Lưu đỉnh u là đỉnh trước của v trong đường đi ngắn nhất
            }
        }
    }

    // Truy ngược để in ra đường đi
    if (dist[t] == INF) {
        printf("-1\n");
    } else {
        // Lưu đường đi ngắn nhất từ s đến t
        int path[n + 1], path_len = 0;
        for (int v = t; v != -1; v = p[v]) {
            path[path_len++] = v;
        }
        
        // In đường đi theo thứ tự từ s đến t
        printf("%d", path[path_len - 1]);
        for (int i = path_len - 2; i >= 0; i--) {
            printf(" -> %d", path[i]);
        }
        printf("\n");
    }
}

int main() {
    int n, m;
    scanf("%d %d", &n, &m);

    Edge edges[m];

    // Đọc các cung
    for (int i = 0; i < m; i++) {
        scanf("%d %d %d", &edges[i].u, &edges[i].v, &edges[i].w);
    }

    int s, t;
    scanf("%d %d", &s, &t);

    // Thực hiện thuật toán Bellman-Ford
    bellman_ford(n, m, edges, s, t);

    return 0;
}
