Viết chương trình đọc một đơn đồ thị vô hướng, có trọng số không âm từ bàn phím, tìm đường đi ngắn nhất từ đỉnh s đến đỉnh t (s và t cũng được đọc từ bàn phím).

Đầu vào (Input)

Dữ liệu đầu vào được nhập từ bàn phím với định dạng:

Dòng đầu tiên chứa 2 số nguyên n và m (1≤n<100;0≤m<500)
m dòng tiếp theo mỗi dòng chứa 3 số nguyên u, v, w mô tả cung (u, v) có trọng số w (0≤w≤100)
.
Dòng cuối cùng chứa 2 số nguyên s và t.
Đầu ra (Output)

In đường đi ngắn nhất từ s đến t theo mẫu:
```lang:cpp;;
s -> u1 -> u2 -> ... -> t```
Xem thêm ví dụ bên dưới.
Gợi ý

Lần ngược theo p[u] để có được đường đi ngắn nhất.
For example:

Input	Result
3 3	3 -> 2 -> 1  
1 2 3
2 3 5
1 3 10
3 1


#include <stdio.h>
#include <limits.h>

#define MAX_N 100
#define MAX_M 500

int dist[MAX_N + 1];
int p[MAX_N + 1];
int visited[MAX_N + 1];
int graph[MAX_N + 1][MAX_N + 1];

void dijkstra(int n, int s) {
    for (int i = 1; i <= n; i++) {
        dist[i] = INT_MAX;
        p[i] = -1;
        visited[i] = 0;
    }

    dist[s] = 0;

    for (int i = 1; i <= n - 1; i++) {
        int min_dist = INT_MAX;
        int u = -1;

        for (int v = 1; v <= n; v++) {
            if (!visited[v] && dist[v] < min_dist) {
                min_dist = dist[v];
                u = v;
            }
        }

        visited[u] = 1;

        for (int v = 1; v <= n; v++) {
            if (graph[u][v] != -1 && !visited[v]) {
                if (dist[v] > dist[u] + graph[u][v]) {
                    dist[v] = dist[u] + graph[u][v];
                    p[v] = u;
                }
            }
        }
    }
}

void print_path(int t) {
    if (t == -1) {
        printf("No path\n");
        return;
    }

    if (p[t] != -1) {
        print_path(p[t]);
    }

    // In đỉnh t, nếu t là đỉnh cuối, không in " -> " sau đó
    if (p[t] != -1) {
        printf(" -> ");
    }
    printf("%d", t);
}

int main() {
    int n, m;
    scanf("%d %d", &n, &m);

    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            graph[i][j] = -1;
        }
    }

    for (int i = 0; i < m; i++) {
        int u, v, w;
        scanf("%d %d %d", &u, &v, &w);
        graph[u][v] = w;
        graph[v][u] = w;  // Đối với đồ thị vô hướng
    }

    int s, t;
    scanf("%d %d", &s, &t);

    dijkstra(n, s);

    if (dist[t] == INT_MAX) {
        printf("-1\n");
    } else {
        print_path(t);
        printf("\n");
    }

    return 0;
}
