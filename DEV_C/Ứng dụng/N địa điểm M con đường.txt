Come and Go (nguồn: UVA Online Judge, Problem 11838)

Trong một thành phố có N địa điểm được nối với nhau bằng M con đường 1 chiều và 2 chiều. Yêu cầu tối thiểu của một thành phố là từ địa điểm này bạn phải có thể đi đến một địa điểm khác bất kỳ.

Hãy viết chương trình kiểm tra xem các con đường của thành phố có thoả mãn yêu cầu tối thiểu này không.

Dữ liệu đầu vào có dạng như sau:

4 5
1 2 1
1 3 2
2 4 1
3 4 1
4 1 2
Trong ví dụ này, có 4 địa điểm và 5 con đường, mỗi con đường có dạng a b p,  trong đó a, b là các địa điểm; và nếu p = 1, con đường đang xét là đường 1 chiều, ngược lại nó là đường 2 chiều.

Đầu vào (Input)

Dữ liệu đầu vào được nhập từ bàn phím (stdin) với định dạng:

Dòng đầu tiên chứa 2 số nguyên N và M, tương ứng là số địa điểm và số con đường.
M dòng tiếp theo mỗi dòng chứa 3 số nguyên a, b, p. Nếu p = 1, con đường (a, b) là con đường 1 chiều, ngược lại nếu p = 2, con đường (a, b) là con đường 2 chiều.
Đầu ra (Output)

In ra màn hình OKIE nếu các con đường của thành phố có thoả mãn yêu cầu, ngược lại in ra NO.
Xem thêm ví dụ bên dưới.
Gợi ý

Xây dựng đồ thị có hướng từ dữ liệu các con đường và các địa điểm
Địa điểm ~ đỉnh
Đường 1 chiều ~ cung
Đường 2 chiều ~ 2 cung
Áp dụng giải thuật kiểm tra đồ thị có liên thông mạnh hay không.


For example:

Input	Result
5 7	OKIE
1 2 1
2 3 1
3 1 1
2 4 1
3 4 1
4 5 1
5 3 1

8 10	NO
1 2 2
1 3 1
2 8 1
3 4 1
3 5 2
4 2 1
4 7 1
4 8 1
5 7 1 
6 7 2



#include <stdio.h>
#include <stdlib.h>

#define MAX_N 1000

int n, m;  // Số đỉnh và số cung
int adj[MAX_N][MAX_N];  // Ma trận kề của đồ thị ban đầu
int adj_rev[MAX_N][MAX_N];  // Ma trận kề của đồ thị đảo ngược
int visited[MAX_N];

void dfs(int u, int adj[MAX_N][MAX_N]) {
    visited[u] = 1;
    for (int v = 1; v <= n; ++v) {
        if (adj[u][v] && !visited[v]) {
            dfs(v, adj);
        }
    }
}

int check_strongly_connected() {
    // Bước 1: Kiểm tra liên thông từ đỉnh 1 trong đồ thị ban đầu
    for (int i = 1; i <= n; ++i) visited[i] = 0;
    dfs(1, adj);
    
    // Nếu có đỉnh chưa được thăm, không liên thông mạnh
    for (int i = 1; i <= n; ++i) {
        if (!visited[i]) return 0;
    }
    
    // Bước 2: Kiểm tra liên thông từ đỉnh 1 trong đồ thị đảo ngược
    for (int i = 1; i <= n; ++i) visited[i] = 0;
    dfs(1, adj_rev);
    
    // Nếu có đỉnh chưa được thăm, không liên thông mạnh
    for (int i = 1; i <= n; ++i) {
        if (!visited[i]) return 0;
    }

    return 1;  // Đồ thị liên thông mạnh
}

int main() {
    // Đọc dữ liệu đầu vào
    scanf("%d %d", &n, &m);
    
    // Khởi tạo ma trận kề
    for (int i = 0; i < m; ++i) {
        int a, b, p;
        scanf("%d %d %d", &a, &b, &p);
        adj[a][b] = 1;  // Đồ thị ban đầu
        adj_rev[b][a] = 1;  // Đồ thị đảo ngược
        if (p == 2) {
            adj[b][a] = 1;  // Đường 2 chiều, thêm cung ngược lại
            adj_rev[a][b] = 1;  // Đồ thị đảo ngược thêm cung ngược lại
        }
    }

    // Kiểm tra đồ thị có liên thông mạnh không
    if (check_strongly_connected()) {
        printf("OKIE\n");
    } else {
        printf("NO\n");
    }

    return 0;
}


