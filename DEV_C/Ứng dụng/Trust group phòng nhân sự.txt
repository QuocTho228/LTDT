Trust group (nguồn: UVA Online Judge, Problem 11709)

Phòng nhân sự của tổ chức Association of Cookie Monsters (ACM) nhận thấy rằng gần đây hiệu quả làm việc của các nhân viên có chiều hướng giảm sút. Vì thế họ đã lấy ý kiến các nhân viên và phát hiện ra nguyên nhân của vấn đề này, đó là: sự tin cậy. Một số nhân viên không tin cậy vào các nhân viên khác trong nhóm làm việc của mình. Điều này làm giảm động lực và niềm vui trong công việc của các nhân viên.

Phòng nhân sự muốn giải quyết triệt để vấn đề này nên họ quyết định tổ chức lại các nhóm làm việc sao cho ổn định. Một nhóm làm việc sẽ ổn định khi mà những người trong nhóm tin cậy lẫn nhau. Họ đã hỏi các nhân viên và biết được những người mà một nhân viên tin cậy trực tiếp. Ngoài ra, sự tin cậy có tính bắt cầu: nếu A tin cậy B và B tin cậy C thì A cũng sẽ tin cậy C. Lẽ dĩ nhiên, một nhân viên sẽ tự tin cậy chính bản thân mình. Tuy nhiên, cần chú ý là sự tin cậy lại không có tính đối xứng: A tin cậy B thì không nhất thiết B phải tin cậy A.

Phòng nhân sự muốn tổ chức thành ít nhóm nhất có thể. Hãy lập trình để giúp họ.

Giả sử các nhân viên được đánh số là 1, 2, ..., n.

Đầu vào (Input)

Dữ liệu đầu vào được nhập từ bàn phím theo định dạng:

Dòng đầu tiên chứa 2 số nguyên n và m, tương ứng là số nhân viên và số cặp tin cậy.
m dòng tiếp theo, mỗi dòng chứa 2 số nguyên a b, nói rằng người a tin cậy vào người b.
Đầu ra (Output)

In ra màn hình số lượng nhóm ít nhất mà những người trong nhóm đều tin cậy lẫn nhau
Xem thêm trong phần ví dụ
For example:

Input	Result
5 7	1
1 2
2 3
3 1
2 4
3 4
4 5
5 3

8 13	3
1 2
1 3
2 1
2 8
3 4
3 5
4 2
4 7
4 8
5 3
5 7
6 7
7 6



#include <stdio.h>
#include <stdlib.h>

#define MAX_N 1000

int n, m;  // Số đỉnh và số cung
int adj[MAX_N][MAX_N];  // Đồ thị gốc
int adj_rev[MAX_N][MAX_N];  // Đồ thị đảo ngược
int visited[MAX_N];
int order[MAX_N];  // Thứ tự kết thúc của DFS
int scc_count = 0;  // Đếm số SCC

void dfs1(int u) {
    visited[u] = 1;
    for (int v = 1; v <= n; ++v) {
        if (adj[u][v] && !visited[v]) {
            dfs1(v);
        }
    }
    order[scc_count++] = u;  // Ghi lại thứ tự kết thúc
}

void dfs2(int u) {
    visited[u] = 1;
    for (int v = 1; v <= n; ++v) {
        if (adj_rev[u][v] && !visited[v]) {
            dfs2(v);
        }
    }
}

int find_scc_count() {
    // Bước 1: Thực hiện DFS trên đồ thị gốc để tạo thứ tự kết thúc
    for (int i = 1; i <= n; ++i) visited[i] = 0;
    for (int i = 1; i <= n; ++i) {
        if (!visited[i]) {
            dfs1(i);
        }
    }
    
    // Bước 2: Thực hiện DFS trên đồ thị đảo ngược theo thứ tự kết thúc
    for (int i = 1; i <= n; ++i) visited[i] = 0;
    scc_count = 0;  // Đếm số SCC
    for (int i = n - 1; i >= 0; --i) {  // Duyệt theo thứ tự kết thúc
        int u = order[i];
        if (!visited[u]) {
            dfs2(u);
            scc_count++;  // Tìm được một SCC mới
        }
    }

    return scc_count;
}

int main() {
    // Đọc dữ liệu đầu vào
    scanf("%d %d", &n, &m);
    
    // Khởi tạo đồ thị và đồ thị đảo ngược
    for (int i = 0; i < m; ++i) {
        int a, b;
        scanf("%d %d", &a, &b);
        adj[a][b] = 1;  // Đồ thị gốc
        adj_rev[b][a] = 1;  // Đồ thị đảo ngược
    }

    // Tìm số lượng SCC (các nhóm ổn định)
    int result = find_scc_count();
    printf("%d\n", result);

    return 0;
}
