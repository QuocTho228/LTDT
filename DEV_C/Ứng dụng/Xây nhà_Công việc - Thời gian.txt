Có một dự án xây nhà với 10 công việc được cho như bảng sau:

Công việc xây dựng nhà

Người ta cần:
- Xác định thời điểm sớm nhất và trể nhất để bắt đầu cho mỗi công việc mà không ảnh hưởng đến tiến độ của dự án
Để đơn giản trong cài đặt, ta đánh số lại các công việc theo thứ tự 1, 2, 3 ...thay vì A, B, C....như sau:

Danh sách công việc

 và lưu vào tập tin theo định dạng như bảng giá trị đầu vào

Hãy viết chương trình tìm thời gian sớm nhất hoàn thành dự án và Thời điểm sớm nhất và trể nhất để bắt đầy cho mỗi công việc của dự án mà không ảnh hưởng đến tiến độ của dự án.

Đầu vào:
10
7 0
3 1 0
1 2 0
8 1 0
2 3 4 0
1 3 4 0
1 3 4 0
2 6 0
2 8 0
1 5 7 9 0

Dòng đầu tiên là số công việc (10), các dòng tiếp theo mỗi dòng mô tả một công việc bao gồm d[u]: thời gian hoàn thành công việc u và danh sách các công việc trước đó của u. Danh sách được kết thúc bằng số 0. Ví dụ: công việc 1 (công việc A) có d[1] = 7 và danh sách các công việc trước đó rỗng.

Công việc 2 (công việc B) có d[2] = 3 và danh sách công việc trước đó là {1}.

Đầu ra:
Dòng đầu tiên: Thời gian sớm nhất hoàn thành dự án
Mỗi dòng tiếp theo: In ra thời gian sớm nhất và thời trể nhất để bắt đầu cho mỗi công việc (1 => n+2, gồm cả công việc alpha và beta)

t(u)-T(u)

Chú ý đọc dữ liệu:
Đọc file

For example:

Input	
10
7 0
3 1 0
1 2 0
8 1 0
2 3 4 0
1 3 4 0
1 3 4 0
2 6 0
2 8 0
1 5 7 9 0

Result
21
0-0
7-11
10-14
7-7
15-18
15-15
15-19
16-16
18-18
20-20
0-0
21-21


#include <stdio.h>
#include <limits.h>

#define MAX_N 100
#define INF INT_MAX

int n;
int d[MAX_N]; // d[u]: thời gian hoàn thành công việc u
int adj[MAX_N][MAX_N]; // Ma trận kề lưu các cạnh của đồ thị
int earliest[MAX_N]; // Thời gian sớm nhất để bắt đầu mỗi công việc
int latest[MAX_N]; // Thời gian trễ nhất để bắt đầu mỗi công việc

// Hàm khởi tạo đồ thị
void init_graph(int n) {
    for (int u = 0; u < n; u++) {
        for (int v = 0; v < n; v++) {
            adj[u][v] = 0;
        }
    }
}


// Hàm thêm cạnh
void add_edge(int u, int v) {
    adj[u][v] = 1;
}

// Hàm sắp xếp topo và tính thời gian sớm nhất
void topologicalSortEarliest() {
    int inDegree[MAX_N] = {0};
    int queue[MAX_N], front = 0, rear = 0;

    // Tính bậc vào của mỗi đỉnh
    for (int u = 1; u <= n; u++) {
        for (int v = 1; v <= n; v++) {
            if (adj[u][v]) inDegree[v]++;
        }
    }

    // Đưa các đỉnh có bậc vào bằng 0 vào hàng đợi
    for (int u = 1; u <= n; u++) {
        if (inDegree[u] == 0) {
            queue[rear++] = u;
            earliest[u] = 0;
        }
    }

    // Xử lý theo thứ tự topo
    while (front < rear) {
        int u = queue[front++];
        for (int v = 1; v <= n; v++) {
            if (adj[u][v]) {
                if (earliest[v] < earliest[u] + d[u]) {
                    earliest[v] = earliest[u] + d[u];
                }
                if (--inDegree[v] == 0) {
                    queue[rear++] = v;
                }
            }
        }
    }
}

// Hàm tính thời gian trễ nhất
void topologicalSortLatest(int projectDuration) {
    int outDegree[MAX_N] = {0};
    int queue[MAX_N], front = 0, rear = 0;

    // Khởi tạo thời gian trễ nhất của các đỉnh với giá trị lớn nhất có thể
    for (int u = 1; u <= n; u++) {
        latest[u] = INF;
        for (int v = 1; v <= n; v++) {
            if (adj[u][v]) outDegree[u]++;
        }
    }

    // Đặt thời gian trễ nhất của đỉnh kết thúc bằng thời gian dự án
    for (int u = 1; u <= n; u++) {
        if (outDegree[u] == 0) {
            queue[rear++] = u;
            latest[u] = projectDuration;
        }
    }

    // Xử lý theo thứ tự topo ngược
    while (front < rear) {
        int u = queue[front++];
        for (int v = 1; v <= n; v++) {
            if (adj[v][u]) { // Nếu có cạnh từ v đến u
                if (latest[v] > latest[u] - d[v]) {
                    latest[v] = latest[u] - d[v];
                }
                if (--outDegree[v] == 0) {
                    queue[rear++] = v;
                }
            }
        }
    }
}

int main() {
    int u, v;

    // Đọc dữ liệu từ file
    //freopen("DuAnXayNha.txt", "r", stdin);
    scanf("%d", &n);

    // Khởi tạo đồ thị
    init_graph(n);

    // Đọc thời gian hoàn thành và các công việc trước đó cho từng công việc
    for (u = 1; u <= n; u++) {
        scanf("%d", &d[u]);
        while (1) {
            scanf("%d", &v);
            if (v == 0) break;
            add_edge(v, u); // Có cạnh từ v đến u
        }
    }

    // Sắp xếp topo và tính thời gian sớm nhất cho mỗi công việc
    topologicalSortEarliest();

    // Tính thời gian sớm nhất hoàn thành dự án
    int projectDuration = 0;
    for (u = 1; u <= n; u++) {
        if (projectDuration < earliest[u] + d[u]) {
            projectDuration = earliest[u] + d[u];
        }
    }

    // Tính thời gian trễ nhất để bắt đầu mỗi công việc
    topologicalSortLatest(projectDuration);

    // In ra kết quả
    printf("%d\n", projectDuration); // Thời gian sớm nhất hoàn thành dự án
    for (u = 1; u <= n; u++) {
        printf("%d-%d\n", earliest[u], latest[u] - 1);
    }
    
    printf("%d-%d\n", earliest[1], earliest[1] ); //thời gian của anpha (thời gian sớm nhất tại vị trí đầu tiên)
    printf("%d-%d", latest[n], latest[n]); // thời gian beta (thời gian trễ nhất tại vị trí cuối cùng)

    return 0;
}
