Microsoft Excel là chương trình xử lý bảng tính nằm trong bộ Microsoft Office của hãng phần mềm Microsoft. Excel được thiết kế để giúp ghi lại, trình bày các thông tin xử lý dưới dạng bảng, thực hiện tính toán và xây dựng các số liệu thống kê trực quan.

Bảng tính Excel được chia thành nhiều hàng và cột. Giao điểm của hàng và cột gọi là một ô. Trong một ô của Excel, ta có thể nhập một giá trị hoặc một công thức có sử dụng giá trị của 1 hay nhiều ô khác. Khi ô A1 sử dụng giá trị của ô B2 ta nói A1 tham chiếu đến B2 hay A1 phụ thuộc vào B2.

Một lỗi thường gặp trong Excel là tham chiếu vòng (a circular reference). Tham chiếu vòng là trường hợp một ô tham chiếu đến chính nó hoặc như ví dụ bên dưới: A9 tham chiếu đến C2, C2 tham chiếu đến E9 và E9 tham chiếu đến A9.

Vấn đề đặt ra là làm thế nào để phát hiện có tham chiếu vòng trong bảng tính. Giả sử bảng tính có n ô, để đơn giản, ta đánh số các ô đang xét là 1, 2, 3, ..., n. Bạn biết được ô nào tham chiếu đến (các) ô nào. Hãy viết chương trình kiểm tra xem có xuất hiện tham chiếu vòng hay không.

Đầu vào (Input)

Dữ liệu đầu vào được nhập từ bàn phím với định dạng:

Dòng đầu tiên chứa 2 số nguyên n và m, tương ứng là số ô và số tham chiếu.
m dòng tiếp theo mỗi dòng chứa 2 số nguyên u, v nói rằng ô u tham chiếu đến ô v.
Đầu ra (Output)

In ra màn hình CIRCULAR REFERENCE nếu bảng tính có tham chiếu vòng, ngược lại in ra OK.

Chú ý

Để chạy thử chương trình, bạn nên tạo một tập tin dt.txt chứa đồ thị cần kiểm tra.
Thêm dòng freopen("dt.txt", "r", stdin); vào ngay sau hàm main(). Khi nộp bài, nhớ gỡ bỏ dòng này ra.
Có thể sử dụng đoạn chương trình đọc dữ liệu mẫu sau đây:
```lang:cpp;;
freopen("dt.txt", "r", stdin); //Khi nộp bài nhớ bỏ dòng này.
Graph G;
int n, m, u, v, e;
scanf("%d%d", &n, &m);
init_graph(&G, n);
	
for (e = 0; e < m; e++) {
    scanf("%d%d", &u, &v);
    add_edge(&G, u, v, w);
}```
For example:

Input	Result
3 3	CIRCULAR REFERENCE
1 3
2 1
3 2
 
7 9	OK	
1 2
1 3
1 4
2 3
2 6
3 5
3 7
4 5
5 7



#include <stdio.h>
#include <stdlib.h>

#define MAX_N 1000

int n, m;  // số đỉnh và số cung
int adj[MAX_N][MAX_N];  // ma trận kề
int visited[MAX_N];  // trạng thái của đỉnh (0: UNVISITED, 1: VISITING, 2: VISITED)

// Hàm DFS để kiểm tra chu trình
int dfs(int u) {
    visited[u] = 1;  // Đánh dấu đỉnh u là đang thăm (VISITING)
    
    for (int v = 1; v <= n; v++) {
        if (adj[u][v]) {  // Nếu có cung từ u đến v
            if (visited[v] == 0) {  // Nếu đỉnh v chưa thăm
                if (dfs(v)) {  // Nếu đỉnh v có chu trình
                    return 1;
                }
            }
            // Nếu gặp lại đỉnh đã thăm và đỉnh đó đang thăm (VISITING)
            else if (visited[v] == 1) {
                return 1;  // Có chu trình
            }
        }
    }

    visited[u] = 2;  // Đánh dấu đỉnh u là đã thăm (VISITED)
    return 0;
}

int main() {
    // Đọc vào số đỉnh và số cung
    scanf("%d %d", &n, &m);

    // Khởi tạo ma trận kề
    for (int i = 0; i < m; i++) {
        int u, v;
        scanf("%d %d", &u, &v);
        adj[u][v] = 1;  // Đánh dấu có cung từ u đến v
    }

    // Kiểm tra chu trình cho tất cả các đỉnh
    for (int i = 1; i <= n; i++) {
        if (visited[i] == 0 && dfs(i)) {
            printf("CIRCULAR REFERENCE\n");
            return 0;
        }
    }

    printf("OK\n");  // Nếu không có chu trình
    return 0;
}

