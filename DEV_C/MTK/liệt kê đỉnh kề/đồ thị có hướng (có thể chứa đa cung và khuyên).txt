Viết chương trình bằng ngôn ngữ C cho phép người dùng nhập dữ liệu của một đồ thị có hướng (có thể chứa đa cung và khuyên) và in các đỉnh kề của các đỉnh ra màn hình.

Biểu diễn đồ thị bằng phương pháp "Ma trận kề".

Đầu vào

Dữ liệu đầu vào được đọc từ dòng nhập chuẩn (stdin, bàn phím) theo định dạng:

Dòng đầu tiên chứa 2 số nguyên n và m cách nhau một khoảng trắng, n: số đỉnh, m: số cung
m dòng tiếp theo, mỗi dòng chứa 2 số nguyên u v cách nhau 1 khoảng trắng mô tả cung (u, v).
Đầu ra


In ra n dòng, dòng thứ i in các đỉnh kề của đỉnh i, cách nhau 1 khoảng trắng, theo thứ tự tăng dần (không lặp lại), ví dụ: neighbours(2) = 1 2 4
Chú ý

Giả sử dữ liệu đầu vào luôn hợp lệ, không cần phải kiểm tra
Nộp toàn bộ chương trình
Xem thêm định dạng đầu vào và đầu ra trong phần For example
Ấn "Precheck" (nếu có) để kiểm tra chương trình trên các ví dụ (sai KHÔNG bị trừ điểm)
Ấn "Check" (nếu có) để kiểm tra chương trình trên toàn bộ dữ liệu kiểm tra (sai bị TRỪ ĐIỂM)
For example:

Input	
4 3
1 3
4 1
3 3

Result
neighbours(1) = 3
neighbours(2) =
neighbours(3) = 3
neighbours(4) = 1



#include <stdio.h>

#define MAX_N 100

typedef struct {
    int n, m;             // n: số đỉnh, m: số cung
    int A[MAX_N][MAX_N];  // Ma trận kề
} Graph;

// Hàm khởi tạo đồ thị
void init_graph(Graph *pG, int n) {
    pG->n = n;
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            pG->A[i][j] = 0; // Khởi tạo tất cả các cạnh bằng 0
        }
    }
}

// Hàm thêm một cung vào đồ thị
void add_edge(Graph *pG, int u, int v) {
    pG->A[u][v]++; // Tăng số cung từ u đến v
}

// Hàm in các đỉnh kề của đỉnh u
void print_neighbours(Graph *pG, int u) {
    printf("neighbours(%d) =", u);
    for (int v = 1; v <= pG->n; v++) {
        if (pG->A[u][v] > 0) { // Kiểm tra có cung từ u đến v
            printf(" %d", v);
        }
    }
    printf("\n");
}

int main() {
    Graph G;
    int n, m;

    // Nhập số đỉnh và số cung
    scanf("%d %d", &n, &m);

    // Khởi tạo đồ thị
    init_graph(&G, n);

    // Nhập các cung
    for (int i = 0; i < m; i++) {
        int u, v;
        scanf("%d %d", &u, &v);
        add_edge(&G, u, v);
    }

    // In các đỉnh kề của từng đỉnh
    for (int u = 1; u <= n; u++) {
        print_neighbours(&G, u);
    }

    return 0;
}

