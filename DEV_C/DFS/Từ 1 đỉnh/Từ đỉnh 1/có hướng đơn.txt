Cho một đồ thị có hướng đơn. Hãy in ra các đỉnh theo thứ tự duyệt khi duyệt đồ thị theo chiều sâu bắt đầu từ đỉnh 1.

Quy ước:

Các đỉnh kề của 1 đỉnh được liệt kê theo thứ tự tăng dần
Nếu cài đặt dùng ngăn xếp hãy đưa các đỉnh kề của đỉnh u vào ngăn xếp theo thứ tự từ lớn đến nhỏ
Đầu vào (Input)

Dữ liệu đầu vào được nhập từ bàn phím với định dạng:

Dòng đầu tiên chứa 2 số nguyên n và m, tương ứng là số đỉnh và số cung.
m dòng tiếp theo mỗi dòng chứa 2 số nguyên u v mô tả cung (u, v).
Đầu ra (Output)

In ra các đỉnh theo thứ tự duyệt, mỗi đỉnh trên 1 dòng.

Xem thêm các ví dụ bên dưới.



Hướng dẫn đọc dữ liệu và chạy thử chương trình

Để chạy thử chương trình, bạn nên tạo một tập tin dt.txt chứa đồ thị cần kiểm tra.
Thêm dòng freopen("dt.txt", "r", stdin); vào ngay sau hàm main(). Khi nộp bài, nhớ gỡ bỏ dòng này ra.
Có thể sử dụng đoạn chương trình đọc dữ liệu mẫu sau đây:
```lang:cpp;;
freopen("dt.txt", "r", stdin); //Khi nộp bài nhớ bỏ dòng này.
Graph G;
int n, m, u, v, w, e;
scanf("%d%d", &n, &m);
init_graph(&G, n);
	
for (e = 0; e < m; e++) {
    scanf("%d%d", &u, &v);
    add_edge(&G, u, v);
}```
For example:

Input	
4 3
2 1
1 3
2 4

Result
1
3


#include <stdio.h>
#include <stdlib.h>

#define MAX_NODES 100

// Ma trận kề và mảng đánh dấu
int adj[MAX_NODES][MAX_NODES];
int visited[MAX_NODES];

// Ngăn xếp
int stack[MAX_NODES];
int top = -1;

// Hàm khởi tạo đồ thị
void init_graph(int n) {
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            adj[i][j] = 0;  // Không có cạnh ban đầu
        }
    }
}

// Hàm thêm cạnh vào đồ thị
void add_edge(int u, int v) {
    adj[u][v] = 1;  // Có cạnh từ u đến v
}

// Hàm đẩy phần tử vào ngăn xếp
void push(int x) {
    stack[++top] = x;
}

// Hàm lấy phần tử ra khỏi ngăn xếp
int pop() {
    return stack[top--];
}

// Hàm kiểm tra ngăn xếp có rỗng không
int is_empty() {
    return top == -1;
}

// Hàm duyệt DFS sử dụng ngăn xếp
void dfs(int start, int n) {
    push(start);           // Đưa đỉnh bắt đầu vào ngăn xếp
    while (!is_empty()) {
        int u = pop();      // Lấy đỉnh trên cùng của ngăn xếp
        if (!visited[u]) {  // Nếu đỉnh chưa được thăm
            visited[u] = 1; // Đánh dấu đỉnh đã thăm
            printf("%d\n", u); // In ra đỉnh

            // Duyệt các đỉnh kề của u theo thứ tự từ lớn đến nhỏ
            for (int v = n; v >= 1; v--) {
                if (adj[u][v] == 1 && !visited[v]) {
                    push(v); // Đưa đỉnh kề vào ngăn xếp
                }
            }
        }
    }
}

int main() {
    int n, m, u, v;

    // Đọc số đỉnh và số cạnh
    scanf("%d %d", &n, &m);

    // Khởi tạo đồ thị
    init_graph(n);

    // Đọc các cạnh và thêm vào đồ thị
    for (int i = 0; i < m; i++) {
        scanf("%d %d", &u, &v);
        add_edge(u, v);
    }

    // Khởi tạo mảng visited
    for (int i = 1; i <= n; i++) {
        visited[i] = 0;
    }

    // Duyệt đồ thị theo chiều sâu (DFS) bắt đầu từ đỉnh 1
    dfs(1, n);

    return 0;
}
