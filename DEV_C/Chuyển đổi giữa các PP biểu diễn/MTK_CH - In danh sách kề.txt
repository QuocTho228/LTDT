Viết chương trình bằng ngôn ngữ C cho phép người nhập vào ma trận kề của một đồ thị có hướng và in danh sách kề của các đỉnh ra màn hình.

Đầu vào

Dữ liệu đầu vào được đọc từ dòng nhập chuẩn (stdin, bàn phím) theo định dạng:

Dòng đầu tiên chứa 1 số nguyên n mô tả số đỉnh của đồ thị
n dòng tiếp theo mô tả ma trận kề của đồ thị. Mỗi dòng có n số nguyên, cách nhau 1 khoảng trắng.
Đầu ra


In ra n dòng, mỗi dòng tương ứng với danh sách kề của 1 đỉnh.
Dòng thứ i, in danh sách các đỉnh kề của đỉnh i. Liệt kê các đỉnh kề (có lặp lại) của i theo thứ tự tăng dần, cách nhau 1 khoảng trắng, kết thúc danh sách in thêm số 0, cách phần tử cuối cùng 1 khoảng trắng. Nếu danh sách kề của đỉnh i rỗng, chỉ in số 0 mà thôi.
Chú ý

Giả sử dữ liệu đầu vào luôn hợp lệ, không cần phải kiểm tra
Nộp toàn bộ chương trình
Xem thêm định dạng đầu vào và đầu ra trong phần For example
Ấn "Precheck" (nếu có) để kiểm tra chương trình trên các ví dụ (sai KHÔNG bị trừ điểm)
Ấn "Check" (nếu có) để kiểm tra chương trình trên toàn bộ dữ liệu kiểm tra (sai bị TRỪ ĐIỂM)
Gợi ý

Đọc n, đọc ma trận kề và lưu trực tiếp vào G.A
Duyệt qua các ô của ma trận kề G.A. Con số trong ô G.A[u][v] cho biết số cung đi từ u đến v.
Xem thêm mục 1.3.21 trong tài liệu thực hành
For example:

Input	
4
1 0 0 2
0 0 0 0
0 1 2 1
0 1 0 0

Result
1 4 4 0
0
2 3 3 4 0
2 0


#include <stdio.h>

void printAdjacencyList(int n, int graph[n][n]) {
    for (int i = 0; i < n; i++) {
        int hasNeighbors = 0;
        for (int j = 0; j < n; j++) {
            for (int k = 0; k < graph[i][j]; k++) {
                printf("%d ", j + 1);
                hasNeighbors = 1;
            }
        }
        if (!hasNeighbors) {
            printf("0\n");
            continue;
        }
        printf("0\n");
    }
}

int main() {
    int n;
    scanf("%d", &n);

    int graph[n][n];
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    printAdjacencyList(n, graph);
    return 0;
}

