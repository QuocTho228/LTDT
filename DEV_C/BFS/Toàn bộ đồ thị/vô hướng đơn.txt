Cho một đồ thị vô hướng đơn. Hãy in ra các đỉnh theo thứ tự duyệt khi duyệt đồ thị theo chiều rộng bắt đầu từ đỉnh 1.

Nếu đồ thị không liên thông, sau khi duyệt xong lần 1, tìm đỉnh có chỉ số nhỏ nhất chưa duyệt mà duyệt nó, và cứ tiếp tục như thế cho đến khi tất cả các đỉnh đều được duyệt.

Quy ước:

Các đỉnh kề của 1 đỉnh được liệt kê theo thứ tự tăng dần
Đầu vào (Input)

Dữ liệu đầu vào được nhập từ bàn phím với định dạng:

Dòng đầu tiên chứa 2 số nguyên n và m, tương ứng là số đỉnh và số cung
m dòng tiếp theo mỗi dòng chứa 2 số nguyên u v mô tả cung (u, v)
Đầu ra (Output)

 

In ra các đỉnh theo thứ tự duyệt, mỗi đỉnh trên 1 dòng
 

Xem thêm các ví dụ bên dưới.

Hướng dẫn đọc dữ liệu và chạy thử chương trình

Để chạy thử chương trình, bạn nên tạo một tập tin dt.txt chứa đồ thị cần kiểm tra.
Thêm dòng freopen("dt.txt", "r", stdin); vào ngay sau hàm main(). Khi nộp bài, nhớ gỡ bỏ dòng này ra.
Có thể sử dụng đoạn chương trình đọc dữ liệu mẫu sau đây:
```lang:cpp;;
freopen("dt.txt", "r", stdin); //Khi nộp bài nhớ bỏ dòng này.
Graph G;
int n, m, u, v, w, e;
scanf("%d%d", &n, &m);
init_graph(&G, n);
	
for (e = 0; e < m; e++) {
    scanf("%d%d", &u, &v);
    add_edge(&G, u, v);
}```
For example:

Input	
4 2
4 1
1 3

Result
1
3
4
2



#include <stdio.h>
#include <stdbool.h>

#define MAX 1000

// Cấu trúc đồ thị
typedef struct {
    int n;
    int adj[MAX][MAX];
} Graph;

// Khởi tạo đồ thị
void init_graph(Graph *G, int n) {
    G->n = n;
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            G->adj[i][j] = 0;
        }
    }
}

// Thêm cạnh
void add_edge(Graph *G, int u, int v) {
    G->adj[u][v] = 1;
    G->adj[v][u] = 1;  // Vì là đồ thị vô hướng
}

// Mảng đánh dấu các đỉnh đã được duyệt
bool visited[MAX];

// BFS từ một đỉnh `start`
void bfs(Graph *G, int start) {
    int queue[MAX], front = 0, rear = -1;
    
    // Thêm đỉnh `start` vào hàng đợi và đánh dấu đã duyệt
    rear++;
    queue[rear] = start;
    visited[start] = true;
    
    // Duyệt BFS
    while (front <= rear) {
        int u = queue[front];
        front++;
        printf("%d\n", u);
        
        // Duyệt qua các đỉnh kề của `u` theo thứ tự tăng dần
        for (int v = 1; v <= G->n; v++) {
            if (G->adj[u][v] == 1 && !visited[v]) {
                rear++;
                queue[rear] = v;
                visited[v] = true;
            }
        }
    }
}

int main() {
    // freopen("dt.txt", "r", stdin);  // Khi nộp bài nhớ bỏ dòng này.
    Graph G;
    int n, m, u, v;
    scanf("%d%d", &n, &m);
    init_graph(&G, n);
    
    // Đọc các cạnh và thêm vào đồ thị
    for (int i = 0; i < m; i++) {
        scanf("%d%d", &u, &v);
        add_edge(&G, u, v);
    }
    
    // Khởi tạo mảng đánh dấu
    for (int i = 1; i <= n; i++) {
        visited[i] = false;
    }
    
    // Duyệt BFS cho tất cả các thành phần liên thông
    for (int i = 1; i <= n; i++) {
        if (!visited[i]) {
            bfs(&G, i);
        }
    }
    
    return 0;
}
