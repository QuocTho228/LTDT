Cho một đồ thị vô hướng đơn. Hãy in ra các đỉnh theo thứ tự duyệt khi duyệt đồ thị theo chiều rộng bắt đầu từ đỉnh 1.

Quy ước:

Các đỉnh kề của 1 đỉnh được liệt kê theo thứ tự tăng dần
Đầu vào (Input)

Dữ liệu đầu vào được nhập từ bàn phím với định dạng:

Dòng đầu tiên chứa 2 số nguyên n và m, tương ứng là số đỉnh và số cung.
m dòng tiếp theo mỗi dòng chứa 2 số nguyên u v mô tả cung (u, v).
Đầu ra (Output)

In ra các đỉnh theo thứ tự duyệt, mỗi đỉnh trên 1 dòng.

Xem thêm các ví dụ bên dưới.



Hướng dẫn đọc dữ liệu và chạy thử chương trình

Để chạy thử chương trình, bạn nên tạo một tập tin dt.txt chứa đồ thị cần kiểm tra.
Thêm dòng freopen("dt.txt", "r", stdin); vào ngay sau hàm main(). Khi nộp bài, nhớ gỡ bỏ dòng này ra.
Có thể sử dụng đoạn chương trình đọc dữ liệu mẫu sau đây:
```lang:cpp;;
freopen("dt.txt", "r", stdin); //Khi nộp bài nhớ bỏ dòng này.
Graph G;
int n, m, u, v, w, e;
scanf("%d%d", &n, &m);
init_graph(&G, n);
	
for (e = 0; e < m; e++) {
    scanf("%d%d", &u, &v);
    add_edge(&G, u, v);
}```
For example:

Input	
4 3
2 1
1 3
2 4

Result
1
2
3
4


#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 100
#define MAX_EDGES 100

// Danh sách kề
typedef struct {
    int data[MAX_VERTICES];
    int size;
} List;

typedef struct {
    List adj[MAX_VERTICES]; // Danh sách kề cho từng đỉnh
    int n;                  // Số đỉnh
} Graph;

void init_graph(Graph *G, int n) {
    G->n = n;
    for (int i = 1; i <= n; i++) {
        G->adj[i].size = 0;
    }
}

void add_edge(Graph *G, int u, int v) {
    // Thêm đỉnh v vào danh sách kề của đỉnh u
    G->adj[u].data[G->adj[u].size++] = v;
    // Thêm đỉnh u vào danh sách kề của đỉnh v (vì đồ thị vô hướng)
    G->adj[v].data[G->adj[v].size++] = u;
}

void sort_list(List *L) {
    for (int i = 0; i < L->size - 1; i++) {
        for (int j = i + 1; j < L->size; j++) {
            if (L->data[i] > L->data[j]) {
                int temp = L->data[i];
                L->data[i] = L->data[j];
                L->data[j] = temp;
            }
        }
    }
}

void BFS(Graph *G, int start) {
    int visited[MAX_VERTICES] = {0};
    int queue[MAX_VERTICES], front = 0, rear = 0;

    // Thêm đỉnh bắt đầu vào hàng đợi và đánh dấu đã thăm
    queue[rear++] = start;
    visited[start] = 1;

    while (front < rear) {
        int u = queue[front++];
        printf("%d\n", u);

        // Duyệt các đỉnh kề
        for (int i = 0; i < G->adj[u].size; i++) {
            int v = G->adj[u].data[i];
            if (!visited[v]) {
                queue[rear++] = v;
                visited[v] = 1;
            }
        }
    }
}

int main() {
    Graph G;
    int n, m;
    scanf("%d %d", &n, &m);
    init_graph(&G, n);

    // Đọc các cạnh
    for (int i = 0; i < m; i++) {
        int u, v;
        scanf("%d %d", &u, &v);
        add_edge(&G, u, v);
    }

    // Sắp xếp danh sách kề theo thứ tự tăng dần
    for (int i = 1; i <= n; i++) {
        sort_list(&G.adj[i]);
    }

    // Thực hiện BFS từ đỉnh 1
    BFS(&G, 1);

    return 0;
}
