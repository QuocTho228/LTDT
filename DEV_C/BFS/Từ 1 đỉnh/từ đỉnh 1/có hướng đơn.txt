Cho một đồ thị có hướng đơn. Hãy in ra các đỉnh theo thứ tự duyệt khi duyệt đồ thị theo chiều rộng bắt đầu từ đỉnh 1.

Quy ước:

Các đỉnh kề của 1 đỉnh được liệt kê theo thứ tự tăng dần
Đầu vào (Input)

Dữ liệu đầu vào được nhập từ bàn phím với định dạng:

Dòng đầu tiên chứa 2 số nguyên n và m, tương ứng là số đỉnh và số cung.
m dòng tiếp theo mỗi dòng chứa 2 số nguyên u v mô tả cung (u, v).
Đầu ra (Output)

In ra các đỉnh theo thứ tự duyệt, mỗi đỉnh trên 1 dòng.

Xem thêm các ví dụ bên dưới.



Hướng dẫn đọc dữ liệu và chạy thử chương trình

Để chạy thử chương trình, bạn nên tạo một tập tin dt.txt chứa đồ thị cần kiểm tra.
Thêm dòng freopen("dt.txt", "r", stdin); vào ngay sau hàm main(). Khi nộp bài, nhớ gỡ bỏ dòng này ra.
Có thể sử dụng đoạn chương trình đọc dữ liệu mẫu sau đây:
```lang:cpp;;
freopen("dt.txt", "r", stdin); //Khi nộp bài nhớ bỏ dòng này.
Graph G;
int n, m, u, v, w, e;
scanf("%d%d", &n, &m);
init_graph(&G, n);
	
for (e = 0; e < m; e++) {
    scanf("%d%d", &u, &v);
    add_edge(&G, u, v);
}```
For example:

Input	
4 3
2 1
1 3
2 4

Result
1
3



#include <stdio.h>
#include <stdlib.h>

// Khai báo cấu trúc hàng đợi
#define MAX 100

// Khai báo các mảng cần thiết
int adj[MAX][MAX];  // Danh sách kề dưới dạng ma trận
int visited[MAX];    // Mảng đánh dấu các đỉnh đã thăm
int queue[MAX];      // Mảng hàng đợi
int front = 0, rear = 0;  // Vị trí đầu và cuối của hàng đợi

// Hàm thêm phần tử vào hàng đợi
void enqueue(int x) {
    queue[rear++] = x;
}

// Hàm lấy phần tử từ hàng đợi
int dequeue() {
    return queue[front++];
}

// Hàm kiểm tra xem hàng đợi có rỗng không
int is_empty() {
    return front == rear;
}

// Hàm BFS
void bfs(int start, int n) {
    enqueue(start);
    visited[start] = 1;

    while (!is_empty()) {
        int u = dequeue();
        printf("%d\n", u);  // In ra đỉnh u

        // Duyệt qua các đỉnh kề của u
        for (int v = 1; v <= n; v++) {
            if (adj[u][v] == 1 && !visited[v]) {  // Nếu có cung từ u -> v
                visited[v] = 1;
                enqueue(v);
            }
        }
    }
}

int main() {
    int n, m, u, v;

    // Đọc số đỉnh và số cung
    scanf("%d %d", &n, &m);

    // Khởi tạo ma trận kề và mảng visited
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            adj[i][j] = 0;
        }
    }

    // Đọc các cung và tạo đồ thị dưới dạng ma trận kề
    for (int i = 0; i < m; i++) {
        scanf("%d %d", &u, &v);
        adj[u][v] = 1;  // Có cung từ u -> v
    }

    // Khởi tạo mảng visited
    for (int i = 1; i <= n; i++) {
        visited[i] = 0;
    }

    // Duyệt BFS từ đỉnh 1
    bfs(1, n);

    return 0;
}

