Viết chương trình đọc vào một đồ thị có hướng không chu trình G, in các đỉnh của G ra màn hình theo thứ tự topo. Nếu có nhiều thứ tự topo, in một thứ tự bất kỳ.

Đầu vào (Input)

Dữ liệu đầu vào được nhập từ bàn phím với định dạng:

Dòng đầu tiên chứa 2 số nguyên n và m, tương ứng là số đỉnh và số cung.
m dòng tiếp theo mỗi dòng chứa 2 số nguyên u, v mô tả cung (u, v).
Đầu ra (Output)

In các đỉnh ra màn hình theo thứ tự topo. In các đỉnh trên một dòng, cách nhau 1 khoảng trắng.
Gợi ý

Ngoài giải thuật sắp xếp topo dựa trên phương pháp duyệt theo chiều rộng, ta cũng có thể sắp xếp topo dựa trên duyệt theo chiều sâu.

```lang:cpp;;
void dfs(G, u, L) {
    mark[u] = 1;
    for (v là kề của u)
        if (mark[v] == 0)
            dfs(G, v, L);
    push_back(L, u);
}

Khởi tạo mark[u] = 0 với mọi u = 1,n
for (u = 1; u <= n; u++)
    if (mark[u] == 0)
        dfs(G, u, L);
In ngược các phần tử của L



#include <stdio.h>
#include <stdlib.h>

#define MAXN 1000

int n, m; // số đỉnh và số cung
int adj[MAXN][MAXN]; // mảng kề
int mark[MAXN]; // mảng đánh dấu các đỉnh đã thăm
int result[MAXN]; // mảng lưu thứ tự topo
int idx = 0; // chỉ số của kết quả

// Hàm thực hiện DFS và lưu các đỉnh vào danh sách kết quả
void dfs(int u) {
    mark[u] = 1; // Đánh dấu đỉnh u là đã thăm
    for (int v = 1; v <= n; v++) {
        if (adj[u][v] == 1 && mark[v] == 0) { // Nếu có cung u -> v và v chưa thăm
            dfs(v);
        }
    }
    result[idx++] = u; // Thêm đỉnh u vào kết quả
}

// Hàm thực hiện sắp xếp topo bằng DFS
void topologicalSort() {
    // Khởi tạo tất cả các đỉnh chưa thăm
    for (int i = 1; i <= n; i++) {
        mark[i] = 0;
    }

    // Duyệt tất cả các đỉnh
    for (int i = 1; i <= n; i++) {
        if (mark[i] == 0) {
            dfs(i);
        }
    }
}

// Hàm in kết quả sắp xếp topo
void printResult() {
    // In ngược kết quả
    for (int i = n - 1; i >= 0; i--) {
        printf("%d ", result[i]);
    }
    printf("\n");
}

int main() {
    // Đọc vào số đỉnh và số cung
    scanf("%d %d", &n, &m);

    // Khởi tạo đồ thị
    for (int i = 0; i < m; i++) {
        int u, v;
        scanf("%d %d", &u, &v);
        adj[u][v] = 1; // Đánh dấu cung u -> v
    }

    // Gọi hàm sắp xếp topo
    topologicalSort();

    // In kết quả
    printResult();

    return 0;
}


