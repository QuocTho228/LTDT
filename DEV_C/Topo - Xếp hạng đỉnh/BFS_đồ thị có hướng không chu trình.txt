Viết chương trình đọc vào một đồ thị có hướng không chu trình G. Áp dụng thuật toán sắp xếp topo theo phương pháp duyệt theo chiều rộng để sắp xếp các đỉnh của G. In các đỉnh ra màn hình theo thứ tự topo.

Đầu vào (Input)

Dữ liệu đầu vào được nhập từ bàn phím với định dạng:

Dòng đầu tiên chứa 2 số nguyên n và m, tương ứng là số đỉnh và số cung.
m dòng tiếp theo mỗi dòng chứa 2 số nguyên u, v mô tả cung (u, v).
Đầu ra (Output)

In các đỉnh ra màn hình theo thứ tự topo. In các đỉnh trên một dòng, cách nhau 1 khoảng trắng.
For example:

Input	Result
3 2	1 3 2  
1 3
3 2


#include <stdio.h>
#include <stdlib.h>

#define MAXN 1000

int n, m; // số đỉnh và số cung
int in_degree[MAXN]; // mảng lưu độ vào của từng đỉnh
int adj[MAXN][MAXN]; // mảng kề
int result[MAXN]; // mảng kết quả sắp xếp topo
int queue[MAXN]; // hàng đợi

// Hàm thêm phần tử vào hàng đợi
void enqueue(int *front, int *rear, int value) {
    queue[*rear] = value;
    (*rear)++;
}

// Hàm lấy phần tử ra khỏi hàng đợi
int dequeue(int *front, int *rear) {
    int value = queue[*front];
    (*front)++;
    return value;
}

// Hàm thực hiện thuật toán sắp xếp topo bằng BFS (Kahn's Algorithm)
void topologicalSort() {
    int front = 0, rear = 0;
    int index = 0;

    // Đưa các đỉnh có độ vào bằng 0 vào hàng đợi
    for (int i = 1; i <= n; i++) {
        if (in_degree[i] == 0) {
            enqueue(&front, &rear, i);
        }
    }

    // Thực hiện duyệt qua hàng đợi
    while (front < rear) {
        int u = dequeue(&front, &rear); // Lấy đỉnh u ra khỏi hàng đợi
        result[index++] = u; // Ghi đỉnh u vào kết quả

        // Giảm độ vào của các đỉnh kề với u
        for (int v = 1; v <= n; v++) {
            if (adj[u][v] == 1) { // Nếu có cung u -> v
                in_degree[v]--;
                if (in_degree[v] == 0) {
                    enqueue(&front, &rear, v); // Nếu độ vào của v = 0, cho vào hàng đợi
                }
            }
        }
    }
}

int main() {
    // Đọc vào số đỉnh và số cung
    scanf("%d %d", &n, &m);

    // Khởi tạo đồ thị
    for (int i = 0; i < m; i++) {
        int u, v;
        scanf("%d %d", &u, &v);
        adj[u][v] = 1; // Đánh dấu cung u -> v
        in_degree[v]++; // Tăng độ vào của v
    }

    // Gọi hàm sắp xếp topo
    topologicalSort();

    // In kết quả
    for (int i = 0; i < n; i++) {
        printf("%d ", result[i]);
    }

    return 0;
}
